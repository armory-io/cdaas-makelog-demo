version: v1
kind: kubernetes
application: potato-facts
deploymentConfig:
  keepDeploymentObject: true
targets: #This section defines the targets to which you are deploying, and their constraints.
  staging:
    account: demo-staging-cluster
    constraints:
      afterDeployment:
        - runWebhook:
            name: update_change_feed
    namespace: borealis-staging
    strategy: staging_strategy
  prod:
    account: demo-prod-eu-cluster
    constraints:
      afterDeployment:
        - runWebhook:
            name: update_change_feed
        - runWebhook:
            name: Send_Slack_Deployment_Complete
      beforeDeployment:
        - pause:
            requiresRoles:
              - Organization Admin
            untilApproved: true
      dependsOn:
        - staging
    namespace: borealis-prod-eu
    strategy: myBlueGreen
manifests: #This section defines the Manifests you are deploying, by default they reach all targets, but you can specify certain targets if needed.
  - path: manifests/potato-facts.yml
  - path: manifests/potato-lies.yml
  - path: manifests/potato-facts-external-service.yml
    targets:
      - prod
strategies: #This section defines the strategies environments can use to deploy.
  myBlueGreen:
    blueGreen:
      redirectTrafficAfter:      
        - runWebhook:
            name: Send_Slack_Deployment_Starting
        - analysis:
            interval: 10
            numberOfJudgmentRuns: 1
            queries:
              - avgCPUUsage-pass
            units: seconds
            rollBackMode: manual
            rollForwardMode: automatic
            lookbackMethod: growing
        - exposeServices:
            services:
              - potato-facts-internal
              - potato-lies-internal
              - potato-facts-external
              - potato-lies-external
            ttl:
              duration: 30
              unit: MINUTES
        - pause:
            untilApproved: true
      shutDownOldVersionAfter:
        - pause:
            untilApproved: true
        - analysis:
            interval: 10
            numberOfJudgmentRuns: 1
            queries:
              - avgCPUUsage-pass
            units: seconds
            rollBackMode: manual
            rollForwardMode: automatic
            lookbackMethod: growing
  rolling:
    canary:
      steps:
        - setWeight:
            weight: 100
        - exposeServices:
            services:
              - potato-facts-internal
              - potato-lies-internal
            ttl:
              duration: 30
              unit: MINUTES
  staging_strategy:
    canary:
      steps:
        - setWeight:
            weight: 100
        - exposeServices:
            services:
              - potato-facts-internal
              - potato-lies-internal
            ttl:
              duration: 30
              unit: MINUTES
        - runWebhook:
            name: Integration_Tests
analysis: #This section defines queries against your monitoring system that can be used for automated canary analysis.
  defaultMetricProviderName: Stephen-Prometheus
  queries:
    - lowerLimit: 0.0
      name: avgCPUUsage-pass
      queryTemplate: avg (avg_over_time(container_cpu_system_seconds_total{job="kubelet"}[{{armory.promQlStepInterval}}]) * on (pod)  group_left (annotation_app) sum(kube_pod_annotations{job="kube-state-metrics",annotation_deploy_armory_io_replica_set_name="{{armory.replicaSetName}}"}) by (annotation_app, pod)) by (annotation_app) OR on() vector(0)
      upperLimit: 10000.0
trafficManagement: #Traffic management configuration
  - kubernetes:
      - activeService: potato-facts-external
        previewService: potato-facts-internal
      - activeService: potato-lies-external
        previewService: potato-lies-internal
    targets:
      - prod
webhooks: #Webhooks can be used to run external automation.
  - bodyTemplate:
      inline: |-
        {
        "locator": {
          "pull_request": {
            "merge_commit_sha": "{{context.GITHUB_SHA}}"
          }
        },
        "data": {
          "environment": "{{armory.environmentName}}",
          "environmentUrl": "{{armory.preview.potato-facts-internal}}"
        }
        }
    headers:
      - key: Authorization
        value: Bearer {{secrets.makelog-token}}
      - key: Content-Type
        value: application/json
    method: PUT
    disableCallback: true
    name: update_change_feed
    retryCount: 3
    uriTemplate: https://mklog.makelog.io/api/v1/changes/environment
  - bodyTemplate:
      inline: |-
        { "event_type": "webhookCallback", "client_payload": {
            "callbackUri": "{{armory.callbackUri}}/callback"
            }
        }
    headers:
      - key: Authorization
        value: token {{secrets.github_token}}
      - key: Content-Type
        value: application/json
    method: POST
    name: Check_Logs
    retryCount: 3
    uriTemplate: https://api.github.com/repos/{{secrets.github_org}}/{{secrets.github_repository}}/dispatches
    disableCallback: false
  - bodyTemplate:
      inline: |-
        { "event_type": "checkLogs", "client_payload": {
            "callbackUri": "{{armory.callbackUri}}/callback"
            }
        }
    headers:
      - key: Authorization
        value: token {{secrets.github_token}}
      - key: Content-Type
        value: application/json
    method: POST
    name: Security_Scanners
    retryCount: 3
    uriTemplate: https://api.github.com/repos/{{secrets.github_org}}/{{secrets.github_repository}}/dispatches
    disableCallback: false
  - bodyTemplate:
      inline: |-
        { "event_type": "checkLogs", "client_payload": {
            "callbackUri": "{{armory.callbackUri}}/callback"
            }
        }
    headers:
      - key: Authorization
        value: token {{secrets.github_token}}
      - key: Content-Type
        value: application/json
    method: POST
    name: Integration_Tests
    retryCount: 3
    uriTemplate: https://api.github.com/repos/{{secrets.github_org}}/{{secrets.github_repository}}/dispatches
    disableCallback: false
  - bodyTemplate:
      inline: '{ "status_url": "https://console.cloud.armory.io/deployments/{{armory.deploymentId}}", "message": "Deployment of {{armory.applicationName}} to {{armory.environmentName}} is starting." }'
    disableCallback: true
    method: POST
    name: Send_Slack_Deployment_Starting
    retryCount: 3
    uriTemplate: '{{secrets.slackwebhookURL}}'
  - bodyTemplate:
      inline: '{ "status_url": "https://console.cloud.armory.io/deployments/{{armory.deploymentId}}", "message": "Deployment of {{armory.applicationName}} to {{armory.environmentName}} is complete." }'
    disableCallback: true
    method: POST
    name: Send_Slack_Deployment_Complete
    retryCount: 3
    uriTemplate: '{{secrets.slackwebhookURL}}'

